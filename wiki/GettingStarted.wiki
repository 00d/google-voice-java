#summary Simple Overview of this Simple Library.

= Introduction =

Google Voice Java is meant as an API.  You must first have a Google Voice Account.  

= Getting Started =

Besides your login details for your Google Account, you must make up a "Source" value which we presume Google just uses as a tag in logging, and any String value appears to be acceptable.  (Any clarification about the purpose of this variable would be appreciated).  More importantly you need to log into your Google Voice Account, and look up the `_`rnr`_`se value in the page Source Code.  This value does not change and is unique to your account.

Now you must create a Voice object

{{{

import com.techventus.server.voice.Voice;

...

      Voice voice = new Voice(userName, pass, source,rnrSee);

...

}}}

Now, for example, to view the Inbox, call the function:

{{{

       voice.getInbox();

}}}


This function, and the other similar functions return raw HTML or XML code which must be parsed by you.  We may add some kind of parser in the future.  Since this project is FOSS, feel free to contribute one.



== Placing Calls ==


To place a call, you simply pass the number from which you wish to call (originNumber) and the number being called (destinationNumber).  Google Voice only allows you to use an Origin Number which has already been registered with them as associated with that Google Voice Account.

{{{
...

       String originNumber = "2125551234";
 
       String destinationNumber = "4155557895";

       voice.call(originNumber, destinationNumber);

...
}}}


When this code is run, the originNumber should ring (assuming the registration checks out).




== Sending SMS Text Messages ==


Sending an SMS is also trivial.

{{{
...

       voice.sendSMS(destinationNumber, txt);

...
}}}



== Logging In ==

When creating the Voice object, your login details are stored in memory and the Google Client Login token or "auth" key is obtained.  This token is passed back on all subsequent calls.  If your programme runs long enough, that token will expire and any further calls to the Voice object will either result in an exception, or HTML for the Google Voice login screen.  

In this case you can simply renew the auth token by calling 

{{{
...

       voice. login();

...
}}}

and everything _should_ work again.

Indeed, that function is called in the background when you first create the Voice object.

If something is off and you trigger a CAPTCHA from Google Voice, you will probably have to log back into the account manually.  This API is not equipped to handle the CAPTCHA request in any meaningful way.


== Other Callable Functions ==

A complete list of available functions to check to pull recent info from the Google Voice Account.  Again, it is up to you to do the parsing.  All functions return a String or throw an IOException.


{{{

        getInbox()

        getStarred()

        getRecent()

        getSpam()

        getRecorded()

        getPlaced()

        getReceived()
        
        getMissed()

        getSMS()


}}}